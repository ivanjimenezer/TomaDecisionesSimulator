/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simuladordetomadedeciones;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author HP
 */
public class Reporte extends javax.swing.JFrame {
    Connection conexion ;
    //String que guardara el puntaje
    String puntaje = "0";
    //operador para obtener el rango del puntaje
    String operador = ">";
    // se ponen por default la busqueda de ambos tipos de relaciones
    boolean jerar=true, equiva = true, all_relations = true;
    //la tabla esta seleccionada
    boolean tabla_select=false;
    
    //query
    String sql = "";
    String jerarquia; 
    String cabecera = "Relaciones de empleados";
    String empleado;
    int empleado_id;
    
    
    public Reporte() {
        
        initComponents();
        jl_depa.setText("<html>Relaciones intrapersonales que tiene el <br> 1er empleado dentro del departamento : </html>");
        jl_puesto.setText("<html>Relaciones intrapersonales entre el <br> 1er empleado con otros empleados que <br> tienen este puesto : </html>");
        jl_rfc.setText("<html>Buscar 1er empleado  por RFC : </html>");
        operador  = (String) jcb_operador.getSelectedItem();
        jcb_depas.setEnabled(false);
        jcb_puesto.setEnabled(false); 
        //Metodos para llenar los jcombobox
        items_depa(); 
        items_puesto();
        conexion =   conectar();
        tabla_expo();
        tabla_expo2("");
    }
    
    public  Connection conectar(){
        Conexion con = new Conexion();
        return conexion = con.Conectar();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jb_exportar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jcb_operador = new javax.swing.JComboBox<>();
        jtf_puntos = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jcb_depas = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jcb_puesto = new javax.swing.JComboBox<>();
        jch_depa = new javax.swing.JCheckBox();
        jch_puesto = new javax.swing.JCheckBox();
        jch_jera = new javax.swing.JCheckBox();
        jch_equiva = new javax.swing.JCheckBox();
        jb_filtrar = new javax.swing.JButton();
        jl_puesto = new javax.swing.JLabel();
        jl_depa = new javax.swing.JLabel();
        jb_reiniciar = new javax.swing.JButton();
        jl_rfc = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        jtf_emp_buscar = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, 450));

        jb_exportar.setText("Exportar");
        jb_exportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_exportarActionPerformed(evt);
            }
        });
        jPanel1.add(jb_exportar, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 580, -1, -1));

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 580, 70, -1));

        jLabel1.setText("Elegir ver el tipo de relación :");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 240, 180, -1));

        jcb_operador.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ">", "<", "=", ">=", "<=" }));
        jcb_operador.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_operadorItemStateChanged(evt);
            }
        });
        jPanel1.add(jcb_operador, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 290, -1, -1));

        jtf_puntos.setText("0");
        jtf_puntos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jtf_puntosMouseExited(evt);
            }
        });
        jtf_puntos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_puntosActionPerformed(evt);
            }
        });
        jtf_puntos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtf_puntosKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_puntosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_puntosKeyTyped(evt);
            }
        });
        jPanel1.add(jtf_puntos, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 290, 60, -1));

        jLabel2.setText("Puntaje");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 290, 50, 20));

        jcb_depas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_depasItemStateChanged(evt);
            }
        });
        jPanel1.add(jcb_depas, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 430, 110, -1));

        jLabel5.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 24)); // NOI18N
        jLabel5.setText("Generación de Reporte");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 290, 40));

        jcb_puesto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_puestoItemStateChanged(evt);
            }
        });
        jPanel1.add(jcb_puesto, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 540, 110, -1));

        jch_depa.setText("Departamento");
        jch_depa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jch_depaActionPerformed(evt);
            }
        });
        jPanel1.add(jch_depa, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 430, -1, -1));

        jch_puesto.setText("Puesto");
        jch_puesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jch_puestoActionPerformed(evt);
            }
        });
        jPanel1.add(jch_puesto, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 540, -1, -1));

        jch_jera.setSelected(true);
        jch_jera.setText("Jerarquica  >");
        jch_jera.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jch_jeraItemStateChanged(evt);
            }
        });
        jch_jera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jch_jeraActionPerformed(evt);
            }
        });
        jPanel1.add(jch_jera, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 220, 110, -1));

        jch_equiva.setSelected(true);
        jch_equiva.setText("<Equivalente>");
        jch_equiva.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jch_equivaItemStateChanged(evt);
            }
        });
        jch_equiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jch_equivaActionPerformed(evt);
            }
        });
        jPanel1.add(jch_equiva, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 250, 110, -1));

        jb_filtrar.setText("Filtrar");
        jb_filtrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_filtrarActionPerformed(evt);
            }
        });
        jPanel1.add(jb_filtrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 330, 90, -1));

        jl_puesto.setText("jlabel_puesto");
        jPanel1.add(jl_puesto, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 480, -1, -1));

        jl_depa.setText("jLabel3");
        jPanel1.add(jl_depa, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 380, -1, -1));

        jb_reiniciar.setText("Reiniciar");
        jb_reiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_reiniciarActionPerformed(evt);
            }
        });
        jPanel1.add(jb_reiniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 330, -1, -1));

        jl_rfc.setText("Buscar las relaciones de un empleado");
        jl_rfc.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel1.add(jl_rfc, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 60, 200, -1));

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                table2MousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(table2);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 110, 290, 100));

        jtf_emp_buscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_emp_buscarKeyReleased(evt);
            }
        });
        jPanel1.add(jtf_emp_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 80, 120, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 837, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtf_puntosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_puntosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_puntosActionPerformed

    private void jtf_puntosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_puntosKeyReleased
    //Se obtiene el puntaje del valor de la relacion
        puntaje = jtf_puntos.getText();
    }//GEN-LAST:event_jtf_puntosKeyReleased

    private void jtf_puntosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_puntosKeyTyped
         // Se comprueba que el valor ingresado sea un entero
        //el input obtenido se convierte en un char
        char c = evt.getKeyChar();
        //se comprueba que se haya presionado una tecla de número, un borrar, o delete
        if (!(Character.isDigit(c) || (c == evt.VK_BACK_SPACE) || (c == evt.VK_DELETE))) {
            evt.consume();
        }  
    }//GEN-LAST:event_jtf_puntosKeyTyped

    private void jtf_puntosMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf_puntosMouseExited
        //si se deja vacio el espacio de los puntos, entonces se define como valor de 0
        if(jtf_puntos.getText().equals("")){
            puntaje = "0";
            jtf_puntos.setText("0");
            
    }
    }//GEN-LAST:event_jtf_puntosMouseExited

    private void jcb_operadorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_operadorItemStateChanged
        // se cambia el operador elegido
        operador  = (String) jcb_operador.getSelectedItem();
        System.out.println("operador elegido: "+ operador);
    }//GEN-LAST:event_jcb_operadorItemStateChanged

    private void jch_depaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jch_depaActionPerformed
       //tomando en cuenta el estado de la checkbox, lo relacionamos
       jcb_depas.setSelectedIndex(0);

        boolean isChecked = jch_depa.isSelected();
        jcb_depas.setEnabled(isChecked);
        
        tabla_expo();
    }//GEN-LAST:event_jch_depaActionPerformed

    private void jch_puestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jch_puestoActionPerformed
       //tomando en cuenta el estado de la checkbox, lo relacionamos
       jcb_puesto.setSelectedIndex(0); 
       boolean isChecked = jch_puesto.isSelected();
        jcb_puesto.setEnabled(isChecked);
        
        tabla_expo();
    }//GEN-LAST:event_jch_puestoActionPerformed

    private void jch_jeraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jch_jeraActionPerformed
            keep_select(jch_jera, jch_equiva);
// Se eligen mostrar relaciones jerarquicas, o no
        jerar = jch_jera.isSelected();
        System.out.println("jerarqui select: "+jerar); 
        if (!jch_jera.isSelected()){
             all_relations = false;
        }
    }//GEN-LAST:event_jch_jeraActionPerformed

    private void jch_equivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jch_equivaActionPerformed
                keep_select(jch_jera, jch_equiva);        
// Se eligen mostrar relaciones jerarquicas, o no
        equiva = jch_equiva.isSelected();
        System.out.println("equivalente select: "+equiva); 
        if (!jch_equiva.isSelected()){
             all_relations = false;
        } 
    }//GEN-LAST:event_jch_equivaActionPerformed

    private void jch_equivaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jch_equivaItemStateChanged

    }//GEN-LAST:event_jch_equivaItemStateChanged

    private void jch_jeraItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jch_jeraItemStateChanged

        
    }//GEN-LAST:event_jch_jeraItemStateChanged

    private void jtf_puntosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_puntosKeyPressed
        //si se deja vacio el espacio de los puntos, entonces se define como valor de 0
        if(jtf_puntos.getText().equals("")){
            puntaje = "0";
            jtf_puntos.setText("0");
        }
        
    }//GEN-LAST:event_jtf_puntosKeyPressed

    private void jb_filtrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_filtrarActionPerformed
        tabla_expo();
    }//GEN-LAST:event_jb_filtrarActionPerformed

    private void jcb_depasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_depasItemStateChanged
       //cuando se elija otro departamento se vuelve a hacer la tabla
       String depa = (String) jcb_depas.getSelectedItem();
       if(!depa.equals("Todos")){ 
            tabla_expo(); 
       } 
    }//GEN-LAST:event_jcb_depasItemStateChanged

    private void jcb_puestoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_puestoItemStateChanged
        //cuando se elija otro puesto se vuelve a hacer la tabla
       String puesto = (String) jcb_puesto.getSelectedItem();
       if(!puesto.equals("Todos")){ 
            tabla_expo();
       }
    }//GEN-LAST:event_jcb_puestoItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jb_exportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_exportarActionPerformed
         String detalle = Escribir_cabecera(); 
        save_button(cabecera+detalle+"\n");
    }//GEN-LAST:event_jb_exportarActionPerformed

    private void jb_reiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_reiniciarActionPerformed
        // TODO add your handling code here:
       reiniciar();
    }//GEN-LAST:event_jb_reiniciarActionPerformed

    private void table2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table2MousePressed
        // Se activa la bandera de que hay algo en la tabla seleccionado
        tabla_select = true;
        
        //SE CREAN LAS VARIABLES PARA LAS COORDENADAS de la tabla
        int fila = table2.getSelectedRow(); 
        String text;
         // SE TOMA SU ID 
        text = table2.getValueAt(fila, 0).toString();
        empleado_id = Integer.parseInt(text);
        System.out.println("id seleccionado del empleado a buscar "+empleado_id );
        
    }//GEN-LAST:event_table2MousePressed

    private void jtf_emp_buscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_emp_buscarKeyReleased
        // Buscar dentro de la tabla
        tabla_expo2(jtf_emp_buscar.getText());
    }//GEN-LAST:event_jtf_emp_buscarKeyReleased
    
//Metodo para limpiar los filtros de busqueda
    public void reiniciar(){
        //Se desactiva la bandera de tabla selecta
        tabla_select = false;
        
        //REINICIAR CHECKBOXES
        jch_jera.setSelected(true);
        jch_equiva.setSelected(true);
        jerar=true;
        equiva = true;
        
        //reiniciar operador
        jcb_operador.setSelectedItem(0);
        
        //REINICIAR PUNTAJE
        puntaje = "0";
        jtf_puntos.setText("0");
        
        //reiniciar buscador
        jtf_emp_buscar.setText("");
        //REINICIAR TABLA buscar
        table2.clearSelection();
        //Reiniciar datos
        tabla_expo();
        
    }
    
    
    public String Escribir_cabecera(){
        //String cabecera = "Relaciones de empleados";
        String depa = (String) jcb_depas.getSelectedItem();
        String puesto = (String) jcb_puesto.getSelectedItem();
        if(depa.equals("Todos")){
            if(puesto.equals("Todos")){
                return "";
            }
            if(!puesto.equals("Todos")){
                return " con puesto de "+puesto;
            }
        }
        else{
            if(puesto.equals("Todos")){
                return " en el departamento "+depa;
            }
            if(!puesto.equals("Todos")){
                return " en el departamento "+depa+" y con puesto de "+puesto;
            }
        }
        return "";
    }
    
    
    public void save_button(String header){
        // VEMOS EL HEADER QUE IMPRIMIRA
        System.out.println(header);
        
    System.out.println("Guardando archivo");
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Guardar archivo csv");
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos csv", "csv");
    fileChooser.setFileFilter(filter);

    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToSave = fileChooser.getSelectedFile();
        String filePath = fileToSave.getAbsolutePath();
        if (!filePath.endsWith(".csv")) {
            fileToSave = new File(filePath + ".csv");
        }
        System.out.println("Seleccionar archivo: " + fileToSave.getAbsolutePath());

        try {
            FileWriter writer = new FileWriter(fileToSave);
            // write header row
            writer.write(header); // Write the header
            for (int i = 0; i < table.getColumnCount(); i++) {
                writer.write(table.getColumnName(i));
                if (i != table.getColumnCount() - 1) {
                    writer.write(",");
                }
            }
            writer.write("\n");

            // write data rows
            for (int i = 0; i < table.getRowCount(); i++) {
                for (int j = 0; j < table.getColumnCount(); j++) {
                    Object value = table.getValueAt(i, j);
                    if (value != null) {
                        writer.write(value.toString());
                    }
                    if (j != table.getColumnCount() - 1) {
                        writer.write(",");
                    }
                }
                writer.write("\n");
            }

            writer.close();
            JOptionPane.showMessageDialog(this, "El archivo csv se ha guardado exitosamente");
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo: " + ex.getMessage());
        }
    } else {
        System.out.println("Explorador de archivos cancelado");
    }
}

   public void tabla_expo2(String search){
       String sql_ = "SELECT * from EMPLEADOS WHERE RFC LIKE '%"+search+"%'";
       Statement st; 
        System.out.println(sql);
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Empleado");
        model.addColumn("RFC");
        TableColumn firstColumn = table2.getColumnModel().getColumn(0); // get the first column
        firstColumn.setPreferredWidth(50);
        
       table2.setModel(model);
        //Se hace el query a la BD y se llena la tabla
        String [] datos = new String[7];
        try{
            st = conexion.createStatement();
            ResultSet rs;
               rs = st.executeQuery(sql_); 
           
            while(rs.next()){
                datos[0]= rs.getString(1);
                datos[1]= rs.getString(2);
                datos[2]= rs.getString(3);
                model.addRow(datos);
            }
            }catch(SQLException e){
                    JOptionPane.showMessageDialog(null,"Error"+e.toString());
        }
   }
    
   public void tabla_expo(){
       //Se definen las columnas a mostrar
       sql = "Select RELACIOCONID.IDRELACION, RELACIOCONID.NOMBREEMPLEADO, RELACIOCONID.RELACION,"
               +" RELACIOCONID.EMPLEADOS2  ,TIPORELACION.VALORRELACION FROM "
               +"TIPORELACION INNER JOIN RELACIOCONID ON TIPORELACION.IDTIPORELACION = RELACIOCONID.IDRELACION"
               + "  ";
       System.out.println(sql);
       //se llama al primer bloque de codigo armable
       //EL TIPO DE RELACION
        sql = sql + relacion_sql(all_relations);
        System.out.println(sql);
        
        //EMPLEADO SELECCIONADO
        //deseleccionar al terminar
        if(tabla_select){
            sql = sql + empleado_select();
        }
        
        //EL PUNTAJE
        sql = sql + puntaje_sql(operador, puntaje);
        System.out.println(sql);
        
        //DEPARTAMENTO
        sql = sql + depas_sql();
        System.out.println(sql);
        
        //PUESTOS
        sql = sql + pusto_sql();
        System.out.println(sql);
        
        
        //GENERACION DE LA TABLA 
        Statement st; 
        System.out.println(sql);
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("1er Empleado");
        model.addColumn("Tipo de Relacion");
        model.addColumn("2do Empleado");
        model.addColumn("Puntaje");
        
        table.setModel(model);
        //Se hace el query a la BD y se llena la tabla
        String [] datos = new String[7];
        try{
            st = conexion.createStatement();
            ResultSet rs;
               rs = st.executeQuery(sql); 
           
            while(rs.next()){
                datos[0]= rs.getString(1);
                datos[1]= rs.getString(2);
                datos[2]= rs.getString(3);
               datos[3]= rs.getString(4);
               datos[4]= rs.getString(5);
                model.addRow(datos);
              
            }
            rs.close();
            st.close();
            
        }catch(SQLException e){
                    JOptionPane.showMessageDialog(null,"Error"+e.toString());
        }
       
   }
   
    public String empleado_select(){
       
        return " AND  RELACIOCONID.IDRELACION IN (\n" +
"    SELECT RELACION.IDRELACION \n" +
"    FROM RELACION \n" +
"    INNER JOIN EMPLEADOS ON EMPLEADOS.IDEMPLEADOS = RELACION.EMPLEADOS_IDEMPLEADOS\n" +
"    AND (RELACION.EMPLEADOS_IDEMPLEADOS = "+empleado_id+" OR RELACION.EMPLEADOS_IDEMPLEADOS1 = "+empleado_id+" ) )";
    }
   
   public String depas_sql(){
       
       String depa = (String) jcb_depas.getSelectedItem();
       
       if(!depa.equals("Todos")){
            return " AND RELACIOCONID.IDRELACION IN (\n" +
"    SELECT RELACION.IDRELACION \n" +
"    FROM EMPLEADOS \n" +
"    INNER JOIN RELACION ON EMPLEADOS.IDEMPLEADOS = RELACION.EMPLEADOS_IDEMPLEADOS\n" +
"    INNER JOIN PUESTO ON EMPLEADOS.IDEMPLEADOS = PUESTO.EMPLEADOIDPUESTO AND PUESTO.DEPARTAMENTO = '"+depa+"')";
       }
       return " ";
   }
   
   public String pusto_sql(){
       String puesto = (String) jcb_puesto.getSelectedItem();
       
       if(!puesto.equals("Todos")){
           return "AND RELACIOCONID.IDRELACION IN (\n" +
"    SELECT RELACION.IDRELACION \n" +
"    FROM EMPLEADOS \n" +
"    INNER JOIN RELACION ON EMPLEADOS.IDEMPLEADOS = RELACION.EMPLEADOS_IDEMPLEADOS \n" +
"    INNER JOIN PUESTO ON RELACION.EMPLEADOS_IDEMPLEADOS1 = PUESTO.EMPLEADOIDPUESTO AND PUESTO.NOMBREPUESTO = '"+puesto+"'\n" +
")"; }
       
       
       return " ";
   }
   
   public String puntaje_sql(String operador, String puntaje){ 
       //como en el metodo de abajo, se comprueba si se necesitó especificar el tipo de relacion
       if(all_relations){
           return " AND TIPORELACION.VALORRELACION "+operador+" "+puntaje;
       }
       return " AND TIPORELACION.VALORRELACION "+operador+" "+puntaje;
   }
   
   
   public String relacion_sql(boolean todos){
       //SI no eligieron todos los tipos de relaciones, entonces se genera el codigp
       // para la relacion elegida
       if(!todos){
           //si se eligieron todas las relaciones jerarquicas
           if(jerar){
               //tomando en cuenta la nomenclatura de las relaciones
               // se define la diferenciacion
               return " WHERE RELACIOCONID.RELACION LIKE '% > %'";
           }
           if(equiva){
               return " WHERE RELACIOCONID.RELACION LIKE '%>'";
           }
                      
       }
       //si no se eligio ninguna relacion en especifico, entonces no se envia nada
       return "";
   } 
    
   public void buscar_empleados(String input){
       String sql1 = "Select IDEMPLEADO DEPARTAMENTO FROM PUESTO";
        Statement st;
        Conexion con = new Conexion();
        Connection conexion = con.Conectar();
       
       
   }
   
public void items_depa(){
        String sql1 = "Select DISTINCT DEPARTAMENTO FROM PUESTO";
        Statement st;
        Conexion con = new Conexion();
        Connection conexion = con.Conectar();
        //si la tabla puesto no esta vacia, se insertan los registros
        // en el jcombo box
        boolean vacio =  checkempty("PUESTO");
        
        //si la tabla puesto no esta vacia, se insertan los registros
        // en el jcombo box
        if(vacio == false){ 
            jcb_depas.addItem("Todos");
           try{
            st = conexion.createStatement();
            ResultSet rs = st.executeQuery(sql1);
            
            while(rs.next()){
                jcb_depas.addItem(rs.getString(1));
            }
            rs.close();
            st.close(); 
            
        }catch(SQLException e){
                    JOptionPane.showMessageDialog(null,"Error"+e.toString());
                    } 
        }
        else{
            //SI NO HAY DATOS PARA MOSTRAR, ENTONCES 
            jcb_depas.addItem("Todos");
        }
}

public void items_puesto(){
    String sql1 = "Select DISTINCT NOMBREPUESTO FROM PUESTO";
        Statement st;
        Conexion con = new Conexion();
        Connection conexion = con.Conectar();
        //si la tabla puesto no esta vacia, se insertan los registros
        // en el jcombo box
        boolean vacio =  checkempty("PUESTO");
        
        //si la tabla puesto no esta vacia, se insertan los registros
        // en el jcombo box
        if(vacio == false){
            jcb_puesto.addItem("Todos");
           try{
            st = conexion.createStatement();
            ResultSet rs = st.executeQuery(sql1);
            
            while(rs.next()){
                jcb_puesto.addItem(rs.getString(1));
            }
            rs.close();
            st.close(); 
            
        }catch(SQLException e){
                    JOptionPane.showMessageDialog(null,"Error"+e.toString());
                    } 
        }
        else{
            //SI NO HAY DATOS PARA MOSTRAR, ENTONCES 
            jcb_puesto.addItem("Todos");
        }
}


   public boolean checkempty(String table){
       Statement st;
       Conexion con = new Conexion();
       Connection conexion = con.Conectar();
    try{
        st = conexion.createStatement();
        ResultSet rs = st.executeQuery("SELECT COUNT(*) FROM "+table);
            
        rs.next();
        // Obtiene el numero de registros del resulset
         int count = rs.getInt(1);
        
        rs.close();
        st.close();
        //retorna un falso, porque no esta vacia la tabla
        if(count != 0){
           return false;
       }
        //retorna un true porque si esta vacia 
       return true;
        }catch(SQLException e){
                    JOptionPane.showMessageDialog(null,"Error"+e.toString());
                    } 
       //retorna un true porque si esta vacia 
       return true;
   }
    
public void keep_select(JCheckBox jch1, JCheckBox jch2) { 
    //SE COMPRUEBA SI POR LO MENOS UN CHECKBOX ESTA SELECCIONADO
    if (jch1.isSelected() && jch2.isSelected()) { 
        //SI AMBOS LO ESTAN, NO HAY PROBLEMA
        jch1.setEnabled(true);
        jch2.setEnabled(true);
        all_relations = true;
        jerar = true;
        equiva = true;
    } else if (jch1.isSelected() && !jch2.isSelected()) {
        //si el segundo no lo esta, se deshabilita el primero para evitar deseleccionarlo
        jch1.setEnabled(false);
        jch2.setEnabled(true);
        all_relations = false;
        jerar = true;
        equiva = false;
    } else if (!jch1.isSelected() && jch2.isSelected()) { 
        //y viceversa
        jch1.setEnabled(true);
        jch2.setEnabled(false);
        all_relations = false;
        jerar = false;
        equiva = true;
    } 
    tabla_expo();
}
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reporte().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jb_exportar;
    private javax.swing.JButton jb_filtrar;
    private javax.swing.JButton jb_reiniciar;
    private javax.swing.JComboBox<String> jcb_depas;
    private javax.swing.JComboBox<String> jcb_operador;
    private javax.swing.JComboBox<String> jcb_puesto;
    private javax.swing.JCheckBox jch_depa;
    private javax.swing.JCheckBox jch_equiva;
    private javax.swing.JCheckBox jch_jera;
    private javax.swing.JCheckBox jch_puesto;
    private javax.swing.JLabel jl_depa;
    private javax.swing.JLabel jl_puesto;
    private javax.swing.JLabel jl_rfc;
    private javax.swing.JTextField jtf_emp_buscar;
    private javax.swing.JTextField jtf_puntos;
    private javax.swing.JTable table;
    private javax.swing.JTable table2;
    // End of variables declaration//GEN-END:variables
}
